## แนวคิดหลักใน OOP

# Encapsulation (การห่อหุ้ม)
    แนวคิด: การรวมข้อมูลและฟังก์ชันที่เกี่ยวข้องเข้าไว้ด้วยกันในหน่วยเดียว (วัตถุ) และซ่อนรายละเอียดภายในจากภายนอก

    วัตถุประสงค์: ป้องกันการเข้าถึงข้อมูลโดยตรงที่ไม่ได้รับอนุญาต และทำให้การเปลี่ยนแปลงภายในไม่กระทบโค้ดภายนอก


# Inheritance (การสืบทอดคุณสมบัติ)
    แนวคิด: การอนุญาตให้คลาสใหม่ (คลาสลูก) รับคุณสมบัติและพฤติกรรมจากคลาสเดิม (คลาสแม่) ได้

    วัตถุประสงค์: นำโค้ดกลับมาใช้ใหม่ได้ง่าย (Code Reusability) และสร้างลำดับชั้นของความสัมพันธ์แบบ "เป็นประเภทหนึ่งของ" (is-a)

    
# Polymorphism (การพ้องรูป/หลากหลายรูปแบบ)
    แนวคิด: ความสามารถของวัตถุที่จะปรากฏในหลายรูปแบบ หรือเมธอดที่ทำงานแตกต่างกันไปตามประเภทของวัตถุที่เรียกใช้

    วัตถุประสงค์: เพิ่มความยืดหยุ่นในการออกแบบ ทำให้โค้ดจัดการกับวัตถุต่างชนิดกันได้ผ่านอินเทอร์เฟซเดียวกัน โดยลดการใช้เงื่อนไขตรวจสอบประเภท

    
# Abstraction (การนามธรรม)
    แนวคิด: การแสดงเฉพาะข้อมูลที่จำเป็นและซ่อนรายละเอียดที่ไม่เกี่ยวข้องหรือซับซ้อนออกไป

    วัตถุประสงค์: ลดความซับซ้อน ทำให้ระบบเข้าใจง่ายขึ้น โดยมุ่งเน้นที่ "อะไร" ที่วัตถุทำได้ มากกว่า "อย่างไร" ที่วัตถุทำสิ่งนั้น